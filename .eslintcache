[{"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\index.tsx":"1","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\reportWebVitals.ts":"2","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\App.tsx":"3","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\HomePage\\CreateAccount.tsx":"4","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserListPage.tsx":"5","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\HomePage\\LoginAccount.tsx":"6","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\hook.ts":"7","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\styles\\General.tsx":"8","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\Header\\Logout.tsx":"9","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\Header\\Login.tsx":"10","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\components\\Spinner.tsx":"11","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\components\\WebTopBlock.tsx":"12","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\components\\Pagination.tsx":"13","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserInfoPage\\EditorPage.tsx":"14","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserInfoPage\\UserInfoPage.tsx":"15","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserPage\\UserPage.tsx":"16","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserPage\\EditorPage.tsx":"17"},{"size":500,"mtime":1609832668110,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1609832668110,"results":"20","hashOfConfig":"19"},{"size":1828,"mtime":1616659396430,"results":"21","hashOfConfig":"19"},{"size":3479,"mtime":1616659396431,"results":"22","hashOfConfig":"19"},{"size":6070,"mtime":1616659396431,"results":"23","hashOfConfig":"19"},{"size":2876,"mtime":1616523494781,"results":"24","hashOfConfig":"19"},{"size":9068,"mtime":1616321150517,"results":"25","hashOfConfig":"19"},{"size":1901,"mtime":1616576576793,"results":"26","hashOfConfig":"19"},{"size":1393,"mtime":1616470333342,"results":"27","hashOfConfig":"19"},{"size":823,"mtime":1616470315342,"results":"28","hashOfConfig":"19"},{"size":2966,"mtime":1616524223134,"results":"29","hashOfConfig":"19"},{"size":323,"mtime":1616323769642,"results":"30","hashOfConfig":"19"},{"size":4149,"mtime":1616578195139,"results":"31","hashOfConfig":"19"},{"size":5193,"mtime":1616656864747,"results":"32","hashOfConfig":"19"},{"size":7524,"mtime":1616659287771,"results":"33","hashOfConfig":"19"},{"size":6736,"mtime":1616659396433,"results":"34","hashOfConfig":"19"},{"size":5211,"mtime":1616659396432,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1ip3q26",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"38"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"38"},"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\index.tsx",[],["78","79"],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\reportWebVitals.ts",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\App.tsx",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\HomePage\\CreateAccount.tsx",["80"],"import React, { useRef, useEffect } from 'react'\r\nimport { WInput, WSubmitButton, WTag } from \"../../styles/General\"\r\nimport { RouteComponentProps, Link } from 'react-router-dom'\r\nimport styled from \"styled-components\"\r\nimport { WebTopBlock } from \"../../components/WebTopBlock\"\r\nimport { useUser } from \"../../hook\"\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\n// 　沒有選擇圖片　情況\r\n// 　加上必填提醒　\r\n//　沒有更新des　情況\r\n// 更新完回到　尚未編輯頁　\r\n\r\nexport const CreateAccount: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const emailRef = useRef<HTMLInputElement>(null)\r\n    const passwordRef = useRef<HTMLInputElement>(null)\r\n    const nameRef = useRef<HTMLInputElement>(null)\r\n    const { axiosStatus, axiosUserData, errorCode, message, axiosCreateAccount } = useUser()\r\n\r\n    useEffect(() => {\r\n        if (axiosStatus === \"success\") {\r\n            if (axiosUserData) {\r\n                axiosUserData.editMode = true\r\n                const locationUseList = {\r\n                    pathname: `/UserPage/users/${axiosUserData?.memberId}`,\r\n                    state: axiosUserData,\r\n                }\r\n                history.push(locationUseList)\r\n            }\r\n        } else if (axiosStatus === \"error\") {\r\n            alert(\"errorCode: \" + errorCode + \"message: \" + message)\r\n        }\r\n\r\n\r\n    }, [errorCode])\r\n\r\n    const handleSubmit = () => {//創一個帳號 render 5次???\r\n        let email: string\r\n        let username: string\r\n        let password: string\r\n\r\n        if (emailRef.current?.value !== undefined && passwordRef.current?.value !== undefined && nameRef.current?.value !== undefined) {\r\n            email = emailRef.current?.value\r\n            password = passwordRef.current?.value\r\n            username = nameRef.current?.value\r\n            axiosCreateAccount({ email, password, username })\r\n        } else {\r\n            alert(\"信箱 使用者名稱　密碼　不能為空白\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WebTopBlock />\r\n            <WLoginSection>\r\n                <WLoginContainer>\r\n                    <WTagBlock>\r\n                        <WTag>\r\n                            <Link to=\"/LoginPage/login\">會員登入</Link>\r\n                        </WTag>\r\n                        <WTag>\r\n                            <Link to=\"/SignUpPage/signUp\">加入會員</Link>\r\n                        </WTag>\r\n                    </WTagBlock>\r\n                    <WInput placeholder=\"電子信箱\" type=\"email\" ref={emailRef} />\r\n                    <WInput placeholder=\"使用者名稱\" type=\"text\" ref={nameRef} />\r\n                    <WInput placeholder=\"密碼\" type=\"password\" ref={passwordRef} />\r\n                    <WSubmitButton onClick={() => handleSubmit()}>\r\n                        {axiosStatus !== \"loading\" && \"加入\"}\r\n                        {axiosStatus === \"loading\" && <Spinner size=\"sm\" animation=\"border\" />}\r\n                    </WSubmitButton>\r\n                </WLoginContainer>\r\n            </WLoginSection>\r\n        </>\r\n    );\r\n}\r\n\r\nconst WLoginSection = styled.section`\r\n    padding-top:200px;\r\n    padding-bottom:200px;\r\n`\r\n\r\nconst WLoginContainer = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    width:200px;\r\n    flex-direction: column;\r\n    margin:auto;\r\n`\r\n\r\nconst WTagBlock = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n    margin-bottom: 10px;\r\n`\r\n\r\n","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserListPage.tsx",["81","82","83"],"import React, { useEffect, useState } from 'react'\r\nimport { baseGray } from \"../styles/General\"\r\nimport { Logout } from \"./Header/Logout\"\r\nimport { Login } from \"./Header/Login\"\r\nimport { WebTopBlock } from \"../components/WebTopBlock\"\r\nimport { RouteComponentProps, Route } from 'react-router-dom'\r\nimport { WUserText, WUserImg } from \"../styles/General\"\r\nimport styled from \"styled-components\"\r\nimport { useUser } from \"../hook\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport Spinner from '../components/Spinner'\r\nimport Pagination from '../components/Pagination'\r\n\r\ninterface UserListPageProps extends RouteComponentProps<{}, {}, TLocation> {\r\n\r\n}\r\n\r\ninterface TLocation {\r\n\r\n    jwtString: string,\r\n    memberId: string,\r\n\r\n}\r\ninterface TUser {\r\n    id: string,\r\n    picture_url: string | null,\r\n    username: string,\r\n}\r\n\r\ntype DefaultPageState = {\r\n    currentPage: number,\r\n    maxIndex: number,\r\n    minIndex: number\r\n}\r\n\r\nconst singlePageItemCount = 18\r\n\r\nconst defaultPageState = {\r\n    currentPage: 1,\r\n    maxIndex: singlePageItemCount,\r\n    minIndex: 0\r\n}\r\n\r\nexport const UserListPage: React.FC<UserListPageProps> = ({ history, location }) => {\r\n    const { axiosGetAllUserData, axiosStatus, axiosUserListData } = useUser()\r\n    const [searchValue, setSearchValue] = useState<string>(\"\")\r\n    const [userList, setUserList] = useState<TUser[] | undefined>(axiosUserListData)\r\n    const [pageState, setPageState] = useState<DefaultPageState>(defaultPageState)\r\n\r\n    console.log({ pageState })\r\n\r\n    useEffect(() => { //執行api\r\n        //抓一次資料 會render 6~7次\r\n        axiosGetAllUserData()\r\n    }, [])\r\n\r\n    useEffect(() => { //將api 的值setUserList\r\n        setUserList(axiosUserListData)\r\n    }, [axiosUserListData])\r\n\r\n    useEffect(() => { //搜尋功能 如果沒有搜尋Input 為空 則set原本api的資料\r\n        //每search render 2次\r\n        const searchList = userList !== undefined ? [...userList] : null\r\n\r\n        let searchResult\r\n        if (searchValue.trim() && searchList !== null) {\r\n            searchResult = searchList.filter(item =>\r\n                item.username.indexOf(searchValue.trim()) !== -1\r\n            )\r\n            if (searchResult !== undefined) {\r\n                setUserList(searchResult)\r\n            }\r\n        } else {\r\n            setUserList(axiosUserListData)\r\n        }\r\n    }, [searchValue])\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.target.value)\r\n    }\r\n\r\n    const handleUserBlockClick = (id: string) => {\r\n        if (location.state !== undefined) {\r\n\r\n            const locationUseList = {\r\n                pathname: `/UserPage/users/${id}`,\r\n                state: location.state,\r\n            }\r\n            history.push(locationUseList)\r\n        } else {\r\n            alert(\"請先登入\")\r\n        }\r\n    }\r\n\r\n    const handlePage = (page: number) => {\r\n        setPageState({\r\n            currentPage: page,\r\n            maxIndex: singlePageItemCount * page,\r\n            minIndex: singlePageItemCount * (page - 1)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WebTopBlock />\r\n            {location.state === undefined && <Route component={Login} />}\r\n            {(location.state !== undefined) && <Route component={Logout} />}\r\n            <WUserListSection>\r\n                <WInputBlock >\r\n                    <WSearchText>\r\n                        <FontAwesomeIcon icon={faSearch} />\r\n                    </WSearchText>\r\n                    <WInput type=\"text\" onChange={handleChange} value={searchValue} placeholder=\"搜尋使用者\" />\r\n                </WInputBlock>\r\n                {axiosStatus === \"success\" &&\r\n                    <WUserListContainer>\r\n                        {\r\n                            (userList !== undefined && userList.length > 0) && userList.map((user: TUser, index: number) => {\r\n                                if (index < pageState.maxIndex && pageState.minIndex <= index) {\r\n                                    return (\r\n                                        <WUserBlock key={user.id} onClick={() => handleUserBlockClick(user.id)}>\r\n                                            <WUserImg src={user.picture_url} alt=\"userImg\" />\r\n                                            <WUserText>{user.username}</WUserText>\r\n                                        </WUserBlock>\r\n                                    )\r\n                                }\r\n                            })\r\n                        }\r\n                        {userList?.length === 0 && <p>沒有資料</p>}\r\n                    </WUserListContainer>}\r\n                {\r\n                    (userList !== undefined && userList.length > 0) &&\r\n                    <Pagination\r\n                        onChange={handlePage}\r\n                        ListLength={userList.length}\r\n                        singlePageItemCount={singlePageItemCount}\r\n                        currentPage={pageState.currentPage}\r\n                    />\r\n                }\r\n                {axiosStatus === \"loading\" && <Spinner />}\r\n\r\n            </WUserListSection >\r\n        </>\r\n\r\n    );\r\n}\r\n\r\n\r\nconst WUserListSection = styled.section`\r\n    padding-top:100px;\r\n    padding-bottom:100px;\r\n    text-align: center;\r\n`\r\n\r\nconst WUserListContainer = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    max-width:1000px;\r\n    margin:auto;\r\n    flex-wrap: wrap;\r\n`\r\n\r\nconst WUserBlock = styled.figure`\r\n    cursor:pointer;\r\n    margin: 0 4rem auto;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: 4rem;\r\n`\r\n\r\nconst WInputBlock = styled.div`\r\n    overflow: hidden;\r\n    margin:  0 0 30px 0;\r\n    border-radius: 5px;\r\n    display: inline-block;\r\n`\r\n\r\nconst WInput = styled.input`\r\n    border-radius: 0px 5px 5px 0px;\r\n    padding-left:5px;\r\n`\r\n\r\nconst WSearchText = styled.span`\r\n    padding:5px 10px;\r\n    background-color:${baseGray};\r\n`\r\n\r\n","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\HomePage\\LoginAccount.tsx",["84"],"import React, { useRef, useEffect } from 'react'\r\nimport { RouteComponentProps, Link } from \"react-router-dom\"\r\nimport styled from \"styled-components\"\r\n\r\nimport { useUser } from \"../../hook\"\r\nimport { WInput, WSubmitButton, WTag } from \"../../styles/General\"\r\nimport { WebTopBlock } from \"../../components/WebTopBlock\"\r\nimport { Spinner } from 'react-bootstrap'\r\n\r\nexport const LoginAccount: React.FC<RouteComponentProps> = ({ history }) => {\r\n\r\n    const passwordRef = useRef<HTMLInputElement>(null)\r\n    const nameRef = useRef<HTMLInputElement>(null)\r\n    const { axiosStatus, axiosUserData, errorCode, message, axiosLoginAccount } = useUser()\r\n\r\n    useEffect(() => {\r\n        if (axiosStatus === \"success\") {\r\n            const location = {\r\n                pathname: \"/UserListPage/users\",\r\n                state: axiosUserData\r\n            }\r\n            history.push(location)\r\n        } else if (axiosStatus === \"error\") {\r\n            alert(\"errorCode: \" + errorCode + \"message: \" + message)\r\n        }\r\n\r\n    }, [errorCode])\r\n\r\n    const handleSubmit = () => {\r\n        let account: string\r\n        let password: string\r\n        if (nameRef.current?.value !== undefined && passwordRef.current?.value !== undefined) {\r\n            account = nameRef.current?.value\r\n            password = passwordRef.current?.value\r\n            axiosLoginAccount({ password, account })\r\n        } else {\r\n            alert(\"使用者名稱　密碼　不能為空白\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <WebTopBlock />\r\n            <WLoginSection>\r\n                <WLoginContainer>\r\n                    <WTagBlock>\r\n                        <WTag>\r\n                            <Link to=\"/LoginPage/login\">會員登入</Link>\r\n                        </WTag>\r\n                        <WTag>\r\n                            <Link to=\"/SignUpPage/signUp\">加入會員</Link>\r\n                        </WTag>\r\n                    </WTagBlock>\r\n                    <WInput placeholder=\"使用者名稱\" type=\"text\" ref={nameRef} />\r\n                    <WInput placeholder=\"密碼\" type=\"password\" ref={passwordRef} />\r\n                    <WSubmitButton onClick={() => handleSubmit()}>\r\n                        {axiosStatus !== \"loading\" && \"登入\"}\r\n                        {axiosStatus === \"loading\" && <Spinner size=\"sm\" animation=\"border\" />}\r\n                    </WSubmitButton>\r\n                </WLoginContainer>\r\n            </WLoginSection>\r\n        </>\r\n    );\r\n}\r\n\r\nconst WLoginSection = styled.section`\r\n    padding-top:200px;\r\n    padding-bottom:200px;\r\n`\r\n\r\nconst WLoginContainer = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    width:200px;\r\n    flex-direction: column;\r\n    margin:auto;\r\n`\r\n\r\nconst WTagBlock = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n    margin-bottom: 10px;\r\n`","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\hook.ts",["85"],"import React, { useState } from \"react\"\r\nimport axios from \"axios\"\r\nimport jwtDecode from \"jwt-decode\";\r\n\r\ninterface LoginUserProps {\r\n    account: string,\r\n    password: string,\r\n}\r\n\r\ninterface CreateUserProps {\r\n    email: string,\r\n    username: string,\r\n    password: string\r\n}\r\ninterface LocationStateData {\r\n    memberId: string,\r\n    username: string,\r\n    jwtString?: string,\r\n    editMode?: boolean,\r\n\r\n}\r\n\r\ninterface UpdateUserProps {\r\n    //什麼狀態　做什麼事\r\n    // 資料流　狀態流\r\n    fileData: File | undefined,\r\n    description: string | undefined | null,\r\n    username: string | undefined,\r\n    location: LocationStateData,\r\n    userId: string\r\n}\r\n\r\ninterface UserData {\r\n    description: null | string,\r\n    id: string,\r\n    picture_url: string\r\n    username: string\r\n}\r\n\r\nexport const useUser = () => {\r\n    //下次不要這樣包...\r\n    //下次errorCode 可以考慮用 Return 的方式取得 不然render 太多次了\r\n    const [axiosStatus, setAxiosStatus] = useState(\"idle\")\r\n    const [axiosUserData, setAxiosUserData] = useState<LocationStateData>()\r\n    const [errorCode, setErrorCode] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n    const [userData, setUserData] = useState<UserData>()\r\n    const [axiosUserListData, setAxiosUserListData] = useState<UserData[]>()\r\n\r\n\r\n    return {\r\n        axiosUserListData,\r\n        axiosStatus,\r\n        axiosUserData,\r\n        errorCode,\r\n        message,\r\n        userData,\r\n        axiosLoginAccount: ({ account, password }: LoginUserProps) => {\r\n            const axiosLogin = async () => {\r\n                setAxiosStatus(\"loading\")\r\n                const res = axios.post(\"https://api.weblab.tw/v1/auth/general-login\", {\r\n                    appId: \"weblab\",\r\n                    account: account,\r\n                    password: password\r\n                })\r\n                return res\r\n            }\r\n            axiosLogin()\r\n                .then((res) => {\r\n                    setMessage(res.data.message)\r\n                    const jwtString = res.data.result.authToken\r\n                    const decoded: LocationStateData = jwtDecode(res.data.result.authToken)\r\n                    console.log(\"decoded\", decoded)\r\n                    const locationState = {\r\n                        memberId: decoded?.memberId,\r\n                        jwtString: jwtString,\r\n                        username: decoded?.username\r\n                    }\r\n                    return locationState\r\n                })\r\n                .then((res) => {\r\n                    setAxiosUserData({ ...res })\r\n                })\r\n                .then((res) => {\r\n                    setAxiosStatus(\"success\")\r\n                })\r\n                .then(() => {\r\n                    setErrorCode(\"success no error\")\r\n                })\r\n                .catch((err) => {\r\n                    setAxiosStatus(\"error\")\r\n                    setErrorCode(err)\r\n                })\r\n\r\n        },\r\n        axiosCreateAccount: ({ email, username, password }: CreateUserProps) => {\r\n            const axiosCreate = async () => {\r\n                setAxiosStatus(\"loading\")\r\n                const res = axios.post(\"https://api.weblab.tw/v1/auth/register\", {\r\n                    appId: \"weblab\",\r\n                    email: email,\r\n                    username: username,\r\n                    password: password\r\n                })\r\n                return res\r\n            }\r\n            axiosCreate()\r\n                .then((res) => {\r\n                    setMessage(res.data.message)\r\n                    const jwtString = res.data.result.authToken\r\n                    const decoded: LocationStateData = jwtDecode(res.data.result.authToken)\r\n                    console.log(\"decoded\", decoded)\r\n                    const locationState = {\r\n                        memberId: decoded?.memberId,\r\n                        jwtString: jwtString,\r\n                        username: decoded?.username\r\n                    }\r\n                    return locationState\r\n                })\r\n                .then((res) => {\r\n                    setAxiosUserData(res)\r\n                })\r\n                .then((res) => {\r\n                    setAxiosStatus(\"success\")\r\n                })\r\n                .then(() => {\r\n                    setErrorCode(\"success no error\")\r\n                })\r\n                .catch((err) => {\r\n                    setAxiosStatus(\"error\")\r\n                    setErrorCode(err)\r\n                })\r\n        },\r\n        axiosUpdateAccount: async ({ fileData, description, username, location, userId }: UpdateUserProps) => {\r\n\r\n            const getReadAsDataURL = (file: any) => {\r\n                return new Promise((resolve, reject) => {\r\n                    const reader = new FileReader();\r\n                    reader.addEventListener('load', () => {\r\n                        resolve(reader.result);\r\n                    });\r\n                    reader.readAsDataURL(file);\r\n                })\r\n            }\r\n            const dataUrl: any = fileData === undefined ? null : await getReadAsDataURL(fileData)\r\n\r\n\r\n            const axiosUpdate = async (arrayBuffer: any) => {\r\n\r\n                const res = axios.post(`https://weblab-react-special-midtern.herokuapp.com/v1/users/${userId}`, {\r\n                    username: username,\r\n                    description: description,\r\n                    pictureUrl: arrayBuffer\r\n                }, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${location.jwtString} `\r\n                    },\r\n                })\r\n                return res\r\n            }\r\n            axiosUpdate(dataUrl)\r\n                .then((res) => {\r\n                    setMessage(res.data.message)\r\n                    const memberId = res.data.result.id\r\n                    const username = res.data.result.username\r\n                    setAxiosUserData({ ...axiosUserData, memberId: memberId, username: username })\r\n                })\r\n                .then((res) => {\r\n                    setAxiosStatus(\"success\")\r\n                })\r\n                .then(() => {\r\n                    setErrorCode(\"success no error\")\r\n                })\r\n                .catch((err) => {\r\n                    console.log(\"hooks\", err)\r\n                    setAxiosStatus(\"error\")\r\n                    setErrorCode(err)\r\n                })\r\n        },\r\n        axiosGetSingleUserData: (userId: string) => {\r\n            const axiosGetSignUser = async () => {\r\n                setAxiosStatus(\"loading\")\r\n                const res = await axios.get(`https://weblab-react-special-midtern.herokuapp.com/v1/users/${userId}`)\r\n                return res\r\n            }\r\n            axiosGetSignUser()\r\n                .then((res) => {\r\n                    setMessage(res.data.message)\r\n                    return res\r\n                })\r\n                .then((res) => {\r\n                    setUserData(res.data.result)\r\n                    setAxiosStatus(\"success\")\r\n                })\r\n                .then(() => {\r\n                    setErrorCode(\"success no error\")\r\n                })\r\n                .catch((err) => {\r\n                    setAxiosStatus(\"error\")\r\n                    setErrorCode(err)\r\n                })\r\n        },\r\n        axiosDeleteUserData: ({ userId, jwtString }: { userId: string, jwtString: string | undefined }) => {\r\n            const axiosDeleteUser = async () => {\r\n                setAxiosStatus(\"loading\")\r\n                const res = await axios.delete(`https://weblab-react-special-midtern.herokuapp.com/v1/users/${userId}`, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${jwtString} `\r\n                    }\r\n                })\r\n                return res\r\n            }\r\n            axiosDeleteUser()\r\n                .then((res) => {\r\n                    setMessage(res.data.message)\r\n                    setAxiosStatus(\"success\")\r\n                })\r\n                .then(() => {\r\n                    setErrorCode(\"success no error\")\r\n                })\r\n                .catch((err) => {\r\n                    setAxiosStatus(\"error\")\r\n                    setErrorCode(err)\r\n                })\r\n\r\n        },\r\n        axiosGetAllUserData: () => {\r\n            setAxiosStatus(\"loading\")\r\n            const axiosGetAllUser = async () => {\r\n                const res = axios.get(\"https://weblab-react-special-midtern.herokuapp.com/v1/users/\")\r\n                return res\r\n            }\r\n            axiosGetAllUser()\r\n                .then((res: any) => {\r\n                    setMessage(res.data.message)\r\n                    setAxiosUserListData(res.data.result)\r\n                }).then(() => {\r\n                    setAxiosStatus(\"success\")\r\n\r\n                })\r\n                .then(() => {\r\n                    setErrorCode(\"success no error\")\r\n\r\n                })\r\n                .catch((err) => {\r\n                    setAxiosStatus(\"error\")\r\n                    setErrorCode(err)\r\n\r\n                })\r\n\r\n        }\r\n\r\n    }\r\n\r\n}","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\styles\\General.tsx",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\Header\\Logout.tsx",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\Header\\Login.tsx",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\components\\Spinner.tsx",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\components\\WebTopBlock.tsx",[],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\components\\Pagination.tsx",["86"],"import React, { useState, useEffect } from 'react'\r\nimport styled, { css } from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronLeft, faChevronRight } from '@fortawesome/free-solid-svg-icons'\r\nimport { blue50, gary100, gary500, gary800 } from \"../styles/General\"\r\n\r\n\r\nexport default function Pagination({\r\n    ListLength = 20,\r\n    singlePageItemCount = 5,\r\n\r\n    currentPage = 1,\r\n    onChange = () => console.log(\"page\")\r\n\r\n}: {\r\n    ListLength: number,\r\n    singlePageItemCount: number,\r\n    onChange: (page: number) => void\r\n    currentPage: number,\r\n\r\n\r\n}) {\r\n\r\n    const [pageNumber, setPageNumber] = useState<number>(1)\r\n\r\n    useEffect(() => {\r\n        onChange?.(pageNumber)\r\n    }, [pageNumber])\r\n\r\n    //如果在第二頁時 點其他HeaderTag 則會重新導回第一頁\r\n    useEffect(() => {\r\n        setPageNumber(currentPage)\r\n    }, [currentPage])\r\n\r\n\r\n    const maxPageCount = Math.ceil(ListLength / singlePageItemCount)\r\n\r\n    let isLeftButtonDisable = pageNumber === 1\r\n    let isRightButtonDisable = maxPageCount === pageNumber\r\n\r\n    let pageArrRender: object[] = []\r\n    for (let item = 1; item <= maxPageCount; item++) {\r\n        pageArrRender.push(\r\n            <WPaginationItem key={item} onClick={(e) => handlePageNumberClick(e)}>\r\n                <WNumberItem active={item === pageNumber}>\r\n                    {item}\r\n                </WNumberItem>\r\n            </WPaginationItem>\r\n        )\r\n    }\r\n\r\n    const handlePageNumberClick = (e: React.MouseEvent<HTMLLIElement, MouseEvent>) => {\r\n        const target = e.target as Element\r\n        setPageNumber(Number(target.innerHTML))\r\n\r\n    }\r\n\r\n    const handleLeftClick = () => {\r\n        setPageNumber(prevState => prevState - 1)\r\n\r\n    }\r\n\r\n    const handleRightClick = () => {\r\n        setPageNumber(prevState => prevState + 1)\r\n    }\r\n\r\n    return <>\r\n        <WPaginationList >\r\n            <WPaginationItem>\r\n                <WIconButton\r\n                    onClick={() => handleLeftClick()}\r\n                    cursor={isLeftButtonDisable}\r\n                    disabled={isLeftButtonDisable}>\r\n                    <WLeftIcon\r\n                        icon={faChevronLeft}\r\n                        size=\"sm\" />\r\n                </WIconButton>\r\n            </WPaginationItem>\r\n            {pageArrRender}\r\n            <WPaginationItem>\r\n                <WIconButton\r\n                    onClick={() => handleRightClick()}\r\n                    cursor={isRightButtonDisable}\r\n                    disabled={isRightButtonDisable}>\r\n                    <WRightIcon\r\n                        icon={faChevronRight}\r\n                        size=\"sm\" />\r\n                </WIconButton>\r\n            </WPaginationItem>\r\n        </WPaginationList>\r\n    </>\r\n\r\n}\r\n\r\n\r\nconst WItemHightStyled = css`\r\n    color:${gary800};\r\n    border:solid 1px ${gary500};\r\n`\r\nconst WItemNoHightStyled = css`\r\n    color:${gary100};\r\n    border:solid 1px ${blue50};\r\n`\r\n\r\nconst WItemOnClickStyled = css`\r\n    padding: 0.375rem 0.625rem;\r\n    cursor: pointer;\r\n    line-height: 1;\r\n    border:solid 1px ${blue50};\r\n    color:${gary100};\r\n    transition: all .3s;\r\n    &:hover{\r\n        ${WItemHightStyled}\r\n    }\r\n`\r\n\r\nconst WPaginationList = styled.ul`\r\n    display:flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    padding: 0.313rem 0.313rem;\r\n    >li + li {\r\n        margin-left:0.313rem;\r\n    }\r\n`\r\n\r\nconst WPaginationItem = styled.li`\r\n    \r\n`\r\n\r\nconst WNumberItem = styled.div<{ active?: boolean }>`\r\n    ${WItemOnClickStyled};\r\n    ${props => props.active ? WItemHightStyled : \"\"};\r\n`\r\n\r\nconst WIconButton = styled.button<{ cursor?: boolean }>`\r\n    ${WItemOnClickStyled};\r\n    \r\n    background-color: transparent;\r\n    cursor: ${props => props.cursor ? \" not-allowed\" : \"pointer\"};\r\n    padding: 0.5rem 0.688rem;\r\n    &:focus{\r\n        outline:none;\r\n    }\r\n    &:hover{\r\n        ${props => props.cursor ? WItemNoHightStyled : WItemHightStyled};\r\n    }\r\n`\r\n\r\nconst WLeftIcon = styled(FontAwesomeIcon)`\r\n    \r\n    width:3.125rem;\r\n`\r\n\r\nconst WRightIcon = styled(FontAwesomeIcon)`\r\n    \r\n    width:3.125rem;\r\n`\r\n\r\n","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserInfoPage\\EditorPage.tsx",["87"],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserInfoPage\\UserInfoPage.tsx",["88","89","90"],"D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserPage\\UserPage.tsx",["91","92","93","94","95"],"import React, { useEffect, useState } from 'react'\r\nimport styled from \"styled-components\"\r\nimport { RouteComponentProps, Route } from \"react-router-dom\"\r\nimport { Jumbotron, Container, Row } from \"react-bootstrap\"\r\nimport { WUserText, WUserImg, WSubmitButton, Blue400 } from \"../../styles/General\"\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { Logout } from \"../Header/Logout\"\r\nimport { WebTopBlock } from \"../../components/WebTopBlock\"\r\nimport { EditorPage } from \"./EditorPage\"\r\nimport { useUser } from \"../../hook\"\r\nimport Spinner from '../../components/Spinner'\r\n\r\ninterface TLocation {\r\n\r\n    jwtString?: string,\r\n    username: string,\r\n    memberId: string,\r\n    editMode?: boolean,\r\n\r\n}\r\ninterface UserPageProps extends RouteComponentProps<{ userId: string }, {}, TLocation> {\r\n\r\n}\r\n\r\nexport const UserPage: React.FC<UserPageProps> = ({ history, location, match }) => {\r\n    const [lightBoxStatus, setLightBoxStatus] = useState(false);\r\n    const [editStatus, setEditStatus] = useState(location?.state?.editMode);\r\n    const [lightBoxButtonText, setLightBoxButtonText] = useState(\"\")\r\n\r\n    const { axiosStatus, axiosUserData, errorCode, message, userData, axiosGetSingleUserData, axiosDeleteUserData } = useUser()\r\n\r\n    const { userId } = match.params\r\n\r\n\r\n    const editAuthority = userId === location.state.memberId\r\n    const { state } = location\r\n\r\n    useEffect(() => {\r\n        axiosGetSingleUserData(userId)\r\n\r\n    }, [userId, editStatus])\r\n\r\n    useEffect(() => {\r\n        if (axiosStatus === \"success\") {\r\n            if (message === \"delete the member successfully\") {\r\n                alert(\"刪除成功\")\r\n                const locationState = {\r\n                    pathname: \"/UserListPage/users\",\r\n                    state: axiosUserData\r\n                }\r\n                history.push(locationState)\r\n            }\r\n        } else if (axiosStatus === \"error\") {\r\n            alert(\"errorCode: \" + errorCode + \"message: \" + message)\r\n        }\r\n    }, [axiosStatus])\r\n\r\n    const closeLightBox = () => setLightBoxStatus(false);\r\n\r\n    const openLightBox = (text: string) => {\r\n        if (editAuthority && text === \"編輯\") {\r\n            setEditStatus(true)\r\n        } else {\r\n            setLightBoxStatus(true)\r\n            setLightBoxButtonText(text)\r\n        }\r\n\r\n    }\r\n\r\n    const lightBoxCancelConfirm = () => {\r\n        setLightBoxStatus(false)\r\n        axiosDeleteUserData({ userId, jwtString: state.jwtString })\r\n    }\r\n\r\n    const lightBoxEditConfirm = () => {\r\n        setLightBoxStatus(false)\r\n        setEditStatus(true)\r\n    }\r\n\r\n    const cancelEditPage = () => {\r\n        setEditStatus(false)\r\n    }\r\n\r\n    const UserPage = () => <>\r\n        <WUserPageSection>\r\n            <WUserPageContainer>\r\n                <WUserBlock>\r\n                    <WUserImgList src={userData?.picture_url} alt=\"userImg\" />\r\n                    <WUserText>username__{userData?.username}</WUserText>\r\n                </WUserBlock>\r\n                <WUserDescription>description__\r\n                    {!!userData?.description === false && \"no description here\"}\r\n                    {!!userData?.description === true && userData?.description}\r\n                </WUserDescription>\r\n                <WButtonBlock>\r\n                    {/* 下次遇到可以考慮用disable 來控制 */}\r\n                    <WEditButton onClick={() => openLightBox(\"編輯\")}>編輯</WEditButton>\r\n                    <WDeleteUser onClick={() => openLightBox(\"刪除\")}>刪除此使用者</WDeleteUser>\r\n                </WButtonBlock>\r\n            </WUserPageContainer>\r\n        </WUserPageSection>\r\n    </>\r\n\r\n\r\n    return (\r\n        <>\r\n            <WebTopBlock />\r\n            <Route component={Logout} />\r\n            {axiosStatus === \"success\" && !editStatus && <UserPage />}\r\n\r\n            {axiosStatus === \"success\" && !!editStatus &&\r\n                <EditorPage\r\n                    userId={userId}\r\n                    userData={userData}\r\n                    cancelEditPage={cancelEditPage}\r\n                    editDom={editStatus}\r\n                    setEditDom={setEditStatus}\r\n                    editorLocation={state}\r\n\r\n\r\n                />}\r\n            {axiosStatus === \"loading\" && <Spinner />}\r\n            <LightBox //render props?\r\n                lightBoxText={lightBoxButtonText}\r\n                show={lightBoxStatus}\r\n                closeLightBox={closeLightBox}\r\n                editAuthority={editAuthority}\r\n                lightBoxDeleteConfirm={lightBoxCancelConfirm}\r\n                lightBoxEditConfirm={lightBoxEditConfirm} />\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nconst LightBox = ({ lightBoxText, show, editAuthority, closeLightBox: closeDeleteLightBox, lightBoxDeleteConfirm, lightBoxEditConfirm }:\r\n    {\r\n        lightBoxText: string,\r\n        show: boolean,\r\n        editAuthority: boolean,\r\n        closeLightBox: () => void,\r\n        lightBoxDeleteConfirm: () => void,\r\n        lightBoxEditConfirm: () => void,\r\n    }) => (\r\n    <Modal show={show} onHide={closeDeleteLightBox}>\r\n        <Modal.Header closeButton>\r\n            {editAuthority && <Modal.Title>{lightBoxText}此使用者</Modal.Title>}\r\n            {!editAuthority && <Modal.Title>你非此使用者　無法{lightBoxText}</Modal.Title>}\r\n        </Modal.Header>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={closeDeleteLightBox}>取消</Button>\r\n            {\r\n                editAuthority && lightBoxText === \"刪除\" &&\r\n                < Button variant=\"danger\" onClick={lightBoxDeleteConfirm}>確認</Button>\r\n            }\r\n            {\r\n                editAuthority && lightBoxText === \"編輯\" &&\r\n                < Button variant=\"danger\" onClick={lightBoxEditConfirm}>確認</Button>\r\n            }\r\n        </Modal.Footer>\r\n    </Modal >\r\n)\r\n\r\nconst WUserPageSection = styled.section`\r\n    padding-top:100px;\r\n    padding-bottom:100px;\r\n`\r\n\r\nconst WUserPageContainer = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    max-width:1000px;\r\n    margin:auto;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 0 150px;\r\n`\r\n\r\nconst WUserImgList = styled(WUserImg)`\r\n    margin: 0 auto 20px auto;\r\n    \r\n`\r\n\r\nconst WUserBlock = styled.figure`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\nconst WUserDescription = styled.article`\r\n    font-size:16px;\r\n`\r\n\r\nconst WButtonBlock = styled.div`\r\n\r\n`\r\n\r\nconst WEditButton = styled(WSubmitButton)`\r\n    background-color:white;\r\n    color: ${Blue400};\r\n    border:solid 1px  ${Blue400};\r\n    &:hover{\r\n        background-color:${Blue400};\r\n        color:white;\r\n    }\r\n`\r\n\r\nconst WDeleteUser = styled.a`\r\n    color:red;\r\n    &:hover {\r\n        color:red;\r\n        cursor:pointer;\r\n    }\r\n`","D:\\work\\Font-end\\React\\WebTeam\\BasicLogin_exam\\src\\pages\\UserPage\\EditorPage.tsx",["96"],"\r\nimport React, { useRef, useState, useEffect } from 'react'\r\nimport styled from \"styled-components\"\r\nimport { WUserImg, WSubmitButton, Blue400 } from \"../../styles/General\"\r\nimport { useUser } from \"../../hook\"\r\n\r\ninterface TLocation {\r\n\r\n    jwtString?: string,\r\n    username: string,\r\n    memberId: string,\r\n    editMode?: boolean,\r\n\r\n}\r\ninterface EditorPageProps {\r\n    userData?: {\r\n        description: null | string,\r\n        id: string,\r\n        picture_url: string\r\n        username: string\r\n    }\r\n    cancelEditPage: () => void,\r\n    editDom: boolean | undefined,\r\n    setEditDom: React.Dispatch<React.SetStateAction<boolean | undefined>>,\r\n    userId: string,\r\n    editorLocation: TLocation\r\n}\r\n\r\nexport const EditorPage: React.FC<EditorPageProps> = ({\r\n    userData,\r\n    cancelEditPage,\r\n    setEditDom,\r\n    editDom,\r\n    userId,\r\n    editorLocation\r\n}) => {\r\n    const fileRef = useRef<HTMLInputElement>(null)\r\n    const usernameRef = useRef<HTMLInputElement>(null)\r\n    const textAreaRef = useRef<HTMLTextAreaElement>(null)\r\n    const [imgUrl, setImgUrl] = useState<string>(\"\")\r\n    let userImgUrl = imgUrl ? imgUrl : userData?.picture_url\r\n\r\n    const { axiosStatus, errorCode, message, axiosUpdateAccount } = useUser()\r\n\r\n\r\n    useEffect(() => {\r\n        if (axiosStatus === \"success\") {\r\n            alert(\"更新成功\")\r\n            setEditDom(false)\r\n\r\n        }\r\n\r\n        if (axiosStatus === \"error\") {\r\n\r\n            alert(\"errorCode: \" + errorCode + \"message: \" + message)\r\n        }\r\n\r\n    }, [errorCode])\r\n\r\n    const EditPageSave = () => {\r\n\r\n        let description: string | null | undefined = !!textAreaRef?.current?.value ? textAreaRef?.current?.value : null\r\n        let username: string | undefined = !!usernameRef?.current?.value ? usernameRef?.current?.value : editorLocation.username\r\n        let fileData: File | undefined\r\n        if (fileRef.current?.files !== null) {\r\n            fileData = fileRef.current?.files[0]\r\n            axiosUpdateAccount({ fileData, username, description, userId, location: editorLocation })\r\n        } else {\r\n            alert(\"使用者名稱 為必填\")\r\n        }\r\n\r\n    }\r\n\r\n    const handleImgChange = () => {\r\n        let fileData: File | undefined\r\n        if (fileRef.current?.files !== null) {\r\n            if (fileRef.current?.files[0]?.name !== \"\") {\r\n\r\n                fileData = fileRef.current?.files[0]\r\n                if (fileData?.size !== undefined && fileData?.size < 300000) {\r\n                    setImgUrl(URL.createObjectURL(fileData))\r\n                } else {\r\n                    alert(\"上傳失敗　圖片請勿超過３００ＫＢ\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <WUserPageSection>\r\n            <WUserPageContainer>\r\n                <WUserBlock>\r\n                    <WUserImgList src={userImgUrl} alt=\"userImg\" />\r\n                    <WFileBlock>\r\n                        <WInputFile\r\n                            onChange={() => handleImgChange()}\r\n                            accept=\"image/*\"\r\n                            ref={fileRef}\r\n                            type=\"file\"\r\n                            id=\"file\" />\r\n                        <WLabelFile htmlFor=\"file\" >選擇檔案</WLabelFile>\r\n                        <WWarningSpan>上限300KB</WWarningSpan>\r\n                    </WFileBlock>\r\n                    <WUserTextInput required ref={usernameRef} placeholder={userData?.username} />\r\n                </WUserBlock>\r\n                <WUserDescriptionTextArea ref={textAreaRef} rows={4} cols={50} placeholder={!!userData?.description ? userData?.description : \"type something\"} />\r\n                <WButtonBlock>\r\n                    <WEditButton onClick={() => cancelEditPage()}>取消</WEditButton>\r\n                    <WEditButton onClick={() => EditPageSave()}>儲存</WEditButton>\r\n                </WButtonBlock>\r\n            </WUserPageContainer>\r\n        </WUserPageSection>\r\n    );\r\n}\r\n\r\nconst WUserPageSection = styled.section`\r\n    padding-top:100px;\r\n    padding-bottom:100px;\r\n`\r\n\r\nconst WUserPageContainer = styled.div`\r\n    display:flex;\r\n    justify-content: center;\r\n    max-width:1000px;\r\n    margin:auto;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 0 150px;\r\n`\r\n\r\nconst WUserImgList = styled(WUserImg)`\r\n    margin: 0 auto 20px auto;\r\n    \r\n`\r\n\r\nconst WUserBlock = styled.figure`\r\n    display: flex;\r\n    flex-direction: column;\r\n`\r\n\r\n\r\n\r\nconst WButtonBlock = styled.div`\r\n\r\n`\r\n\r\nconst WEditButton = styled(WSubmitButton)`\r\n    background-color:white;\r\n    color: ${Blue400};\r\n    border:solid 1px  ${Blue400};\r\n    &:hover{\r\n        background-color:${Blue400};\r\n        color:white;\r\n    }\r\n`\r\n\r\n\r\nconst WFileBlock = styled.div`\r\n    display:flex;\r\n    align-items: baseline;    \r\n`\r\n\r\nconst WWarningSpan = styled.span`\r\n    margin-left:10px;\r\n`\r\n\r\nconst WInputFile = styled.input`\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    opacity: 0;\r\n`\r\n\r\nconst WLabelFile = styled.label`\r\n    border: solid #222 1px;\r\n    padding:5px 8px;\r\n    border-radius: 5px; \r\n    cursor:pointer;\r\n`\r\n\r\nconst WUserTextInput = styled.input`\r\n\r\n`\r\n\r\nconst WUserDescriptionTextArea = styled.textarea`\r\n\r\n`\r\n",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":36,"column":8,"nodeType":"103","endLine":36,"endColumn":19,"suggestions":"104"},{"ruleId":"101","severity":1,"message":"105","line":56,"column":8,"nodeType":"103","endLine":56,"endColumn":10,"suggestions":"106"},{"ruleId":"101","severity":1,"message":"107","line":77,"column":8,"nodeType":"103","endLine":77,"endColumn":21,"suggestions":"108"},{"ruleId":"109","severity":1,"message":"110","line":121,"column":126,"nodeType":"111","messageId":"112","endLine":121,"endColumn":128},{"ruleId":"101","severity":1,"message":"102","line":27,"column":8,"nodeType":"103","endLine":27,"endColumn":19,"suggestions":"113"},{"ruleId":"114","severity":1,"message":"115","line":1,"column":8,"nodeType":"116","messageId":"117","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"118","line":28,"column":8,"nodeType":"103","endLine":28,"endColumn":20,"suggestions":"119"},{"ruleId":"101","severity":1,"message":"120","line":58,"column":8,"nodeType":"103","endLine":58,"endColumn":19,"suggestions":"121"},{"ruleId":"101","severity":1,"message":"122","line":39,"column":8,"nodeType":"103","endLine":39,"endColumn":28,"suggestions":"123"},{"ruleId":"101","severity":1,"message":"124","line":54,"column":8,"nodeType":"103","endLine":54,"endColumn":21,"suggestions":"125"},{"ruleId":"101","severity":1,"message":"126","line":102,"column":11,"nodeType":"103","endLine":102,"endColumn":13,"suggestions":"127"},{"ruleId":"114","severity":1,"message":"128","line":4,"column":10,"nodeType":"116","messageId":"117","endLine":4,"endColumn":19},{"ruleId":"114","severity":1,"message":"129","line":4,"column":21,"nodeType":"116","messageId":"117","endLine":4,"endColumn":30},{"ruleId":"114","severity":1,"message":"130","line":4,"column":32,"nodeType":"116","messageId":"117","endLine":4,"endColumn":35},{"ruleId":"101","severity":1,"message":"122","line":41,"column":8,"nodeType":"103","endLine":41,"endColumn":28,"suggestions":"131"},{"ruleId":"101","severity":1,"message":"124","line":56,"column":8,"nodeType":"103","endLine":56,"endColumn":21,"suggestions":"132"},{"ruleId":"101","severity":1,"message":"120","line":58,"column":8,"nodeType":"103","endLine":58,"endColumn":19,"suggestions":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'axiosStatus', 'axiosUserData', 'history', and 'message'. Either include them or remove the dependency array.","ArrayExpression",["136"],"React Hook useEffect has a missing dependency: 'axiosGetAllUserData'. Either include it or remove the dependency array.",["137"],"React Hook useEffect has missing dependencies: 'axiosUserListData' and 'userList'. Either include them or remove the dependency array.",["138"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["139"],"@typescript-eslint/no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["140"],"React Hook useEffect has missing dependencies: 'axiosStatus', 'message', and 'setEditDom'. Either include them or remove the dependency array. If 'setEditDom' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["141"],"React Hook useEffect has a missing dependency: 'axiosGetSingleUserData'. Either include it or remove the dependency array.",["142"],"React Hook useEffect has missing dependencies: 'axiosUserData', 'errorCode', 'history', and 'message'. Either include them or remove the dependency array.",["143"],"React Hook useMemo has missing dependencies: 'openLightBox', 'userData?.description', 'userData?.picture_url', and 'userData?.username'. Either include them or remove the dependency array.",["144"],"'Jumbotron' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.",["145"],["146"],["147"],"no-global-assign","no-unsafe-negation",{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"desc":"152","fix":"153"},{"desc":"148","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"148","fix":"161"},{"desc":"162","fix":"163"},{"desc":"164","fix":"165"},{"desc":"148","fix":"166"},{"desc":"157","fix":"167"},"Update the dependencies array to be: [axiosStatus, axiosUserData, errorCode, history, message]",{"range":"168","text":"169"},"Update the dependencies array to be: [axiosGetAllUserData]",{"range":"170","text":"171"},"Update the dependencies array to be: [axiosUserListData, searchValue, userList]",{"range":"172","text":"173"},{"range":"174","text":"169"},"Update the dependencies array to be: [onChange, pageNumber]",{"range":"175","text":"176"},"Update the dependencies array to be: [axiosStatus, errorCode, message, setEditDom]",{"range":"177","text":"178"},"Update the dependencies array to be: [userId, isEditMode, axiosGetSingleUserData]",{"range":"179","text":"180"},{"range":"181","text":"169"},"Update the dependencies array to be: [openLightBox, userData?.description, userData?.picture_url, userData?.username]",{"range":"182","text":"183"},"Update the dependencies array to be: [userId, editStatus, axiosGetSingleUserData]",{"range":"184","text":"185"},{"range":"186","text":"169"},{"range":"187","text":"178"},[1297,1308],"[axiosStatus, axiosUserData, errorCode, history, message]",[1698,1700],"[axiosGetAllUserData]",[2387,2400],"[axiosUserListData, searchValue, userList]",[1022,1033],[749,761],"[onChange, pageNumber]",[1501,1512],"[axiosStatus, errorCode, message, setEditDom]",[1412,1432],"[userId, isEditMode, axiosGetSingleUserData]",[1949,1962],[3641,3643],"[openLightBox, userData?.description, userData?.picture_url, userData?.username]",[1449,1469],"[userId, editStatus, axiosGetSingleUserData]",[1986,1999],[1513,1524]]